from random import randint
from typing import Dict, Iterable, Iterator, List, Optional, Tuple, Union
from .gameapi import Game, Slot

__all__ = ["GENERIC_TOOLS", "GAMEMODE_SET", "gen_tools_from_generic_tools"]

GENERIC_TOOLS: Tuple[Tuple[str, str], ...] = (
    ("良枪(一)", "保证向自己开枪不会炸膛(无提示)"), # ID0
    ("良枪(二)", "保证向对方开枪不会炸膛(无提示)"), # ID1
    ("小刀", "非常不讲武德的提升1点伤害(无上限)"), # ID2
    ("开挂(一)", "将当前弹壳里的1发子弹退出"), # ID3
    ("超级小木锤", "将对方敲晕1轮"), # ID4
    ("道德的崇高赞许", "回复1点生命值"), # ID5
    ("透视镜", "查看当前子弹"), # ID6
    ("拿来主义", "拿来1个道具(无提示)"), # ID7
    ("你的就是我的", "将对方道具槽位和自己共用(无提示)"), # ID8
    ("防弹衣", "防住对面射来的子弹"), # ID9
    ("反甲", "可以反弹对面射来的子弹(无提示)"), # ID10 TODO
    ("骰子", "可以决定命运......"), # ID11
    ("槽位延期", "可以让临时槽位延后过期(无提示)"), # ID12
    ("镜子", "镜子内外皆为平等"), # ID13
    ("接弹套", "概率接住对面射来的子弹并重新入膛(无提示)"), # ID14
    ("填实", "随机把空弹变为实弹"), # ID15
    ("重整弹药", "给你重新放入弹药的机会"), # ID16
    ("双发射手", "向对面开枪一次可射出多颗子弹"), # ID17
    ("连发射手", "向对面开枪一次有概率清空弹夹"), # ID18
    ("硬币", "可以给你道具......"), # ID19 TODO
    ("燃烧弹", "让射出的子弹带着火焰"), # ID20 TODO
    ("破枪", "让对方开枪时必定炸膛(无提示)"), # ID21
    ("取出子弹", "取出1发由你指定位置的子弹"), # ID22
    ("空弹", "放入1发由你指定位置的空弹"), # ID23
    ("实弹", "放入1发由你指定位置的实弹"), # ID24
    ("神秘子弹", "放入1发由你指定位置的未知子弹"), # ID25
    ("绷带", "2回合后让负伤数减1"), # ID26
    ("医疗包", "可以回复生命值,减少负伤数"), # ID27
    ("开挂(二)", "立即更换一批新的弹夹"), # ID28
    ("双枪会给出答案", "双倍枪筒,双倍快乐"), # ID29
    ("所有或一无所有", "一夜暴富?一夜归零?"), # ID30 TODO
    ("超级大木锤", "整回合都是我的了"), # ID31
    ("不死不休", "打上擂台"), # ID32 TODO
    ("枪筒维修", "降低开枪的炸膛概率") # ID33 TODO
)

def gen_tools_from_generic_tools(toolids: Iterable[int]) -> \
    Dict[int, Tuple[str, str]] :
    RES: Dict[int, Tuple[str, str]] = {}
    for i in toolids :
        RES[i] = GENERIC_TOOLS[i]
    return RES

normal_mode: Game = Game(
    2,
    8,
    1,
    1,
    8,
    1,
    10,
    gen_tools_from_generic_tools(filter((lambda x: x!=10), range(34))),
    {
        0: 8,
        1: 4,
        2: 16,
        3: 16,
        4: 16,
        5: 42,
        6: 16,
        7: 8,
        8: 2,
        9: 4,
        11: 4,
        12: 16,
        13: 1,
        14: 16,
        15: 8,
        16: 10,
        17: 12,
        18: 12,
        21: 6,
        22: 6,
        23: 4,
        24: 2,
        25: 3,
        26: 42,
        27: 4,
        28: 4,
        29: 1,
        30: 1,
        31: 1,
        32: 1,
        33: 2
    },
    {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 10,
        9: 0,
        11: 0,
        12: 0,
        13: 1,
        14: 0,
        15: 0,
        16: 0,
        17: 0,
        18: 0,
        19: 2,
        20: 0,
        21: 0,
        22: 0,
        23: 0,
        24: 0,
        25: 0,
        26: 0,
        27: 0,
        28: 0,
        29: 2,
        30: 8,
        31: 32,
        32: 5,
        33: 0
    },
    {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 3,
        8: 3,
        9: 0,
        11: 0,
        12: 0,
        13: 1,
        14: 0,
        15: 0,
        16: 0,
        17: 0,
        18: 0,
        19: 2,
        20: 0,
        21: 0,
        22: 0,
        23: 0,
        24: 0,
        25: 0,
        26: 0,
        27: 0,
        28: 0,
        29: 0,
        30: 4,
        31: 16,
        32: 3,
        33: 3
    },
    8,
    True
)

infinite_mode: Game = Game(
    2,
    8,
    1,
    1,
    8,
    2,
    18446744073709551615,
    gen_tools_from_generic_tools(
        filter((lambda x: x not in (10, 11, 13)), range(34))
    ),
    {
        0: 8,
        1: 4,
        2: 16,
        3: 16,
        4: 16,
        5: 42,
        6: 16,
        7: 8,
        8: 2,
        9: 4,
        12: 16,
        14: 16,
        15: 8,
        16: 10,
        17: 12,
        18: 12,
        21: 6,
        22: 6,
        23: 4,
        24: 2,
        25: 3,
        26: 42,
        27: 4,
        28: 4,
        29: 1,
        30: 1,
        31: 2,
        32: 1,
        33: 2
    },
    {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 10,
        9: 0,
        12: 0,
        14: 0,
        15: 0,
        16: 0,
        17: 0,
        18: 0,
        19: 2,
        20: 0,
        21: 0,
        22: 0,
        23: 0,
        24: 0,
        25: 0,
        26: 0,
        27: 0,
        28: 0,
        29: 2,
        30: 8,
        31: 32,
        32: 5,
        33: 0
    },
    {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 3,
        8: 3,
        9: 0,
        12: 0,
        14: 0,
        15: 0,
        16: 0,
        17: 0,
        18: 0,
        19: 2,
        20: 0,
        21: 0,
        22: 0,
        23: 0,
        24: 0,
        25: 0,
        26: 0,
        27: 0,
        28: 0
    },
    8,
    True
)

xiaodao_party: Game = Game(
    2,
    8,
    1,
    1,
    2,
    1,
    10,
    gen_tools_from_generic_tools((2, 3)),
    {
        2: 4,
        3: 1
    },
    {
        2: 0,
        3: 0
    },
    {
        2: 0,
        3: 10
    },
    100,
    True
)

dice_kingdom: Game = Game(
    2,
    8,
    1,
    1,
    8,
    50,
    randint(50, 90),
    gen_tools_from_generic_tools((11,)),
    {
        11: 1
    },
    {
        11: 0
    },
    {
        11: 0
    },
    100,
    True
)

class InfiniteMode2 :
    period_count: int
    last_game: Optional[Game]

    def __init__(self, period_count: int = 0) -> None :
        self.period_count = period_count
        self.last_game = None

    def __iter__(self) -> Iterator[Game] :
        return self

    def __next__(self) -> Game :
        if self.last_game is not None and self.last_game.r_hp <= 0 :
            raise StopIteration
        r_slots: Optional[List[Slot]] = \
        None if self.last_game is None else self.last_game.r_slots
        self.last_game = Game(
            2,
            8,
            1,
            1,
            8,
            self.last_game.r_hp if self.last_game is not None else 2,
            10+self.period_count,
            normal_mode.tools.copy(),
            {
                0: 8,
                1: 4,
                2: 16,
                3: 16,
                4: 16,
                5: 42,
                6: 16,
                7: 8,
                8: 2,
                9: 4,
                11: 4,
                12: 16,
                13: 1,
                14: 16,
                15: 8,
                16: 10,
                17: 12,
                18: 12,
                21: 6,
                22: 6,
                23: 4,
                24: 2,
                25: 3,
                26: 42,
                27: 4,
                28: 4,
                29: 1,
                30: 1,
                31: 3,
                32: 1,
                33: 2
            },
            {
                0: 0,
                1: 0,
                2: 0,
                3: 0,
                4: 0,
                5: 0,
                6: 0,
                7: 0,
                8: 10,
                9: 0,
                11: 0,
                12: 0,
                13: 1,
                14: 0,
                15: 0,
                16: 0,
                17: 0,
                18: 0,
                19: 2,
                20: 0,
                21: 0,
                22: 0,
                23: 0,
                24: 0,
                25: 0,
                26: 0,
                27: 0,
                28: 0,
                29: 2,
                30: 8,
                31: 32,
                32: 5,
                33: 0
            },
            {
                0: 0,
                1: 0,
                2: 0,
                3: 0,
                4: 0,
                5: 0,
                6: 0,
                7: 3,
                8: 3,
                9: 0,
                11: 0,
                12: 0,
                13: 1,
                14: 0,
                15: 0,
                16: 0,
                17: 0,
                18: 0,
                19: 2,
                20: 0,
                21: 0,
                22: 0,
                23: 0,
                24: 0,
                25: 0,
                26: 0,
                27: 0,
                28: 0,
                29: 0,
                30: 4,
                31: 16,
                32: 3,
                33: 3
            },
            8,
            True
        )
        if r_slots is not None :
            self.last_game.r_slots = r_slots
        self.period_count += 1
        return self.last_game

combo_party: Game = Game(
    4,
    20,
    2,
    1,
    18,
    40,
    200,
    gen_tools_from_generic_tools((0, 1, 2, 9, 15, 17, 18, 21, 27, 28, 29)),
    {
        0: 2,
        1: 1,
        2: 6,
        9: 3,
        15: 8,
        17: 24,
        18: 20,
        21: 4,
        27: 3,
        28: 5,
        29: 1
    },
    {
        0: 0,
        1: 0,
        2: 0,
        9: 0,
        15: 0,
        17: 0,
        18: 0,
        21: 0,
        27: 0,
        28: 0,
        29: 2
    },
    {
        0: 0,
        1: 0,
        2: 0,
        9: 0,
        15: 0,
        17: 0,
        18: 0,
        21: 0,
        27: 0,
        28: 0,
        29: 1
    },
    12,
    True
)

exploded_test: Game = Game(
    2,
    8,
    1,
    1,
    8,
    10,
    50,
    gen_tools_from_generic_tools((5, 9, 21)),
    {
        5: 1,
        9: 16,
        21: 2
    },
    {
        5: 0,
        9: 0,
        21: 0
    },
    {
        5: 1,
        9: 0,
        21: 2
    },
    6,
    False
)

onlybyhand: Game = Game(
    2,
    8,
    1,
    1,
    8,
    20,
    50,
    {},
    {},
    {},
    {},
    1,
    not randint(0, 1)
)

GAMEMODE_SET: Dict[int, Union[
    Tuple[Iterable[Game], int, float],
    Tuple[Iterable[Game], int, float, str, Optional[str]]
]] = {
    1: ((normal_mode,), 2, 2.5, "普通模式", "新手入门首选"),
    2: ((infinite_mode,), 2, 2.5, "无限模式(一)", "陪你到天荒地老"),
    3: ((xiaodao_party,), 3, 3., "小刀狂欢", "哪发是实弹?"),
    4: ((dice_kingdom,), 4, 2.25, "骰子王国", "最考验运气的一集"),
    5: (InfiniteMode2(), 2, 2.5, "无限模式(二)",
        "霓为衣兮风为马,云之君兮纷纷而来下"),
    6: ((combo_party,), 3, 2.5, "连射派对", "火力全开"),
    7: ((exploded_test,), 2, 1.75, "炸膛测试", "枪在哪边好使?"),
    8: ((onlybyhand,), 1, 2.5, "赤手空“枪”", "没有道具了")
}
